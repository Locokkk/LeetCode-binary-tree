/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

//检查两棵树是否相同
bool isSameTree(struct TreeNode* p, struct TreeNode* q) {
	if (p == NULL && q == NULL)
		return true;
	if (p == NULL || q == NULL)
		return false;
	if (p->val != q->val)
		return false;
	return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
}

//给定一个二叉树，找出其最大深度
int maxDepth(struct TreeNode* root) {
	if (root == NULL)
		return 0;
	int left = maxDepth(root->left);//深度记录下来
	int right = maxDepth(root->right);
	return left > right ? left + 1 : right + 1;
}


//检查给定二叉树是否是镜像对称的
bool isSymmetric(struct TreeNode* root) {
	return isMiror(root, root);//从root开始判断（先判断root是否为空，再判断左右子树是否为空或是否有一个为空）
}

int isMiror(struct TreeNode* t1, struct TreeNode* t2) {//给定左子树指针和右子树指针，起点分别问第二、三个结点

	if (t1 == NULL && t2 == NULL)//左右都为空则对称
		return true;
	if (t1 == NULL || t2 == NULL)//左右中有且仅有一个不为空则不对称
		return false;
	return (t1->val == t2->val) && isMiror(t1->left, t2->right) && isMiror(t1->right, t2->left);
}


//二叉树的前序遍历

 /**
  * Note: The returned array must be malloced, assume caller calls free().
  */
typedef struct TreeNode TreeNode;
int TreeSize(TreeNode *root)
{
	if (root == NULL)
		return 0;
	return TreeSize(root->left) + TreeSize(root->right) + 1;
}
void _preorderTraversal(TreeNode *root, int *array, int *pi)
{
	if (root == NULL)
		return;
	array[*pi] = root->val;
	++(*pi);
	_preorderTraversal(root->left, array, pi);
	_preorderTraversal(root->right, array, pi);

}
int* preorderTraversal(struct TreeNode* root, int* returnSize) {
	*returnSize = TreeSize(root);
	int *array = (int*)malloc(*returnSize * sizeof(int));
	int i = 0;
	_preorderTraversal(root, array, &i);
	return array;
}

//二叉树的中序遍历
/*int TreeSize(struct TreeNode *root)
{
	if(root==NULL)
		return 0;
	return TreeSize(root->left)+TreeSize(root->right)+1;
}*/

void _inorderTraversal(struct TreeNode *root, int *a, int *pi)
{
	if (root == NULL)
		return;
	_inorderTraversal(root->left, a, pi);
	a[*pi] = root->val;
	++(*pi);
	_inorderTraversal(root->right, a, pi);
}

int* inorderTraversal(struct TreeNode* root, int* returnSize) {
	//*returnSize=TreeSize(root);
	int *array = (int*)malloc(100 * sizeof(int));//完成遍历的结点存在array中
	int i = 0;
	_inorderTraversal(root, array, &i);
	*returnSize = i;//放在调用中序遍历之后，得到存放数据的数组下标（数组大小）
	return array;
}


//判断是否是高度平衡二叉树 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1
typedef struct TreeNode TreeNode;
int height(TreeNode *root)
{
	if (root == NULL)
		return 0;
	int left = height(root->left);
	int right = height(root->right);
	return left > right ? left + 1 : right + 1;
}

bool isBalanced(struct TreeNode* root) {
	if (root == NULL)
		return true;
	int leftheight = height(root->left);//计算左右子树高度
	int rightheight = height(root->right);
	return abs(leftheight - rightheight) < 2//保证该节点左右子树高度值差不超过2
		&& isBalanced(root->left)//左子树以相同方式判断
		&& isBalanced(root->right);//右子树以相同方式判断
}




//另一个数的子树
typedef struct TreeNode TreeNode;
bool isSameTree(TreeNode *t1, TreeNode *t2)
{
	if (t1 == NULL && t2 == NULL)
		return true;
	if (t1 == NULL || t2 == NULL)
		return false;
	if (t1->val != t2->val)
		return false;
	return isSameTree(t1->left, t2->left)
		&& isSameTree(t1->right, t2->right);
}

bool isSubtree(struct TreeNode* s, struct TreeNode* t) {
	if (s == NULL)
		return false;
	if (s->val == t->val)//先比较当前节点的值
	{
		if (isSameTree(s, t))//当前节点匹配，调用isSameTree判断是否完全相等
			return true;
	}
	return isSubtree(s->left, t)//当前节点不等，对左右子树进行判断，有一个匹配上即为成功
		|| isSubtree(s->right, t);

}
